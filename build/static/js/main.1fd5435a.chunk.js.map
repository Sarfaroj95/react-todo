{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","props","handleChange","event","setState","target","name","value","handleSubmit","e","preventDefault","console","log","state","axios","post","then","res","data","alert","register","catch","error","title","body","this","className","onSubmit","class","type","placeholder","onChange","Component","TodoItem","titles","get","map","TodoList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oRA2EeA,EAvEf,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IASVC,aAAe,SAACC,GACZ,EAAKC,SAAL,eAAiBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAXnC,EAcnBC,aAAe,SAACC,GACZA,EAAEC,iBACFC,QAAQC,IAAI,EAAKC,OACjBC,IAAMC,KAAK,gDAAiD,EAAKF,OAC5DG,MAAK,SAAAC,GACFN,QAAQC,IAAIK,EAAIC,MAChBC,MAAM,eAAD,OAAgBF,EAAIC,KAAKE,cAGjCC,OAAM,SAAAC,GACHX,QAAQC,IAAIU,GACZH,MAAM,0BAtBd,EAAKN,MAAQ,CACTU,MAAO,GACPC,KAAM,IALK,EADvB,qDAgCc,IAAD,EACmBC,KAAKZ,MAArBU,EADH,EACGA,MAAOC,EADV,EACUA,KAEf,OACI,yBAAKE,UAAU,uBACX,0BAAMC,SAAUF,KAAKjB,cACjB,yBAAKkB,UAAU,eACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,0CACX,uBAAGE,MAAM,kBAGjB,2BAAOC,KAAK,OAAOH,UAAU,+BACzBI,YAAY,gBACZxB,KAAK,QACLC,MAAOgB,EACPQ,SAAUN,KAAKvB,gBAGvB,yBAAKwB,UAAU,oBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,0CACX,uBAAGE,MAAM,kBAGjB,2BAAOC,KAAK,OAAOH,UAAU,+BACzBI,YAAY,gBACZxB,KAAK,OACLC,MAAOiB,EACPO,SAAUN,KAAKvB,gBAGvB,4BAAQ2B,KAAK,SAASH,UAAU,mDAAhC,kBAhEpB,GAA+BM,aCoDhBC,E,kDAnDX,WAAYhC,GAAQ,IAAD,8BACf,cAAMA,IAEDY,MAAQ,CACTqB,OAAQ,IAJG,E,iEASG,IAAD,OACjBpB,IAAMqB,IAAI,qDACLnB,MAAK,SAAAC,GACFN,QAAQC,IAAI,OAAQK,EAAIC,MACxB,EAAKd,SAAS,CAAE8B,OAAQjB,EAAIC,UAE/BG,OAAM,SAAAC,GACHX,QAAQC,IAAI,QAASU,Q,+BAKvB,IACEY,EAAWT,KAAKZ,MAAhBqB,OACR,OACI,6BAGQA,EAAOE,KAAI,SAAAb,Y,GA5BRS,aCaRK,EAdf,uKAEQ,OACI,wBAAIX,UAAU,mBACV,wBAAIA,UAAU,+BAAd,aACA,kBAAC,EAAD,WALhB,GAA8BM,aCuBfM,E,uKAdX,OACE,yBAAKZ,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gCACb,wBAAIA,UAAU,+BAAd,cACA,kBAAC,EAAD,MACA,kBAAC,EAAD,a,GAXMM,aCKEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAC,GACLX,QAAQW,MAAMA,EAAMgC,c","file":"static/js/main.1fd5435a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\n\r\nexport class TodoInput extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            title: '',\r\n            body: ''\r\n\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        console.log(this.state)\r\n        axios.post('https://boilar.herokuapp.com/api/v1/user/todo', this.state)\r\n            .then(res => {\r\n                console.log(res.data)\r\n                alert(`Todo add is ${res.data.register}`)\r\n\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                alert('Todo add is failed')\r\n            })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { title, body } = this.state\r\n\r\n        return (\r\n            <div className=\"card card-body my-3\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className=\"input-group-text bg-primary text-white\">\r\n                                <i class=\"fal fa-save\"></i>\r\n                            </div>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control text-capitalize\"\r\n                            placeholder=\"add todo item\"\r\n                            name='title'\r\n                            value={title}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-group mt-3\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className=\"input-group-text bg-primary text-white\">\r\n                                <i class=\"fal fa-save\"></i>\r\n                            </div>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control text-capitalize\"\r\n                            placeholder=\"add todo body\"\r\n                            name='body'\r\n                            value={body}\r\n                            onChange={this.handleChange} />\r\n\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-block text-capitalize mt-3 \">add item</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoInput\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\n\r\nclass TodoItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            titles: []\r\n        }\r\n    }\r\n\r\n\r\n    componentWillMount() {\r\n        axios.get('https://boilar.herokuapp.com/api/v1/user/todolist')\r\n            .then(res => {\r\n                console.log('Data', res.data)\r\n                this.setState({ titles: res.data })\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error\", error)\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { titles } = this.state\r\n        return (\r\n            <div>\r\n\r\n                {\r\n                    titles.map(title =>\r\n                        // <li key=\"title._id\">\r\n                        //     {title.title}\r\n                        // </li>\r\n\r\n                        <li key=\"title._id\" className=\" pt-2 list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n\r\n                            <h6>{title.title}</h6>\r\n                            <div className=\"todo-icon\">\r\n                                <span className=\"mx-2 text-success\">\r\n                                    <i className=\"fas fa-pen\"></i>\r\n                                </span>\r\n                                <span className=\"mx-2 text-danger\">\r\n                                    <i class=\"fas fa-trash-alt\"></i>\r\n                                </span>\r\n                            </div>\r\n                        </li>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem'\r\n\r\nexport class TodoList extends Component {\r\n    render() {\r\n        return (\r\n            <ul className=\"list-group my-5\">\r\n                <h3 className=\"text-capitalize text-center\">Todo List</h3>\r\n                <TodoItem />\r\n\r\n            </ul>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList\r\n","import React, { Component } from 'react'\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\n\n\nclass App extends Component {\n\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            <h4 className=\"text-capitalize text-center\">todo input</h4>\n            <TodoInput />\n            <TodoList />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}